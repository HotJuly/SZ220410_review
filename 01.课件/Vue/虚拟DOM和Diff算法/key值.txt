1.key值的使用方式
	在遍历数据,产生多个节点,每个节点身上都必须添加上唯一标识key属性

2.常用作key值的数据
	-遍历出来的数据身上的唯一标识属性,例如:id
	-遍历出来的数据的下标,例如:index
	-遍历出来的数据本身,例如:item
		但是该数据必须是基本数据类型

3.key值的作用
	可以提高diff算法的效率
	当遍历的数据发生变化的时候,当前组件会根据最新的数据生成全新的虚拟DOM树,并与旧的虚拟DOM树进行比较,最终找出可以复用的DOM对象
		而key值就是比较的关键

	first render:
		1.将组件的template属性编译成render函数
		2.调用render函数,同时将数据传入,生成当前组件的虚拟DOM树
		3.根据虚拟DOM树,生成真实DOM树
		4.将真实DOM树插入到el元素中
		5.GUI线程根据最新的html内容,渲染页面

		注意:首次渲染中,是没有diff算法参与的

	update render:
		1.调用render函数,同时将最新的数据传入,生成最新的虚拟DOM树
		2.比较新旧虚拟DOM,找到可以复用的真实DOM
		3.如果某些节点没有可以复用的真实DOM,就创建一个全新的真实DOM
		4.合并所有的真实DOM,生成真实DOM树
		5.将真实DOM替换掉页面上对应的组件区域
		6.GUI线程根据最新的html内容,渲染页面

		注意:流程2,3,4就是所谓的diff算法

4.如果使用index作为key值,可能会出现什么情况?
	index作为key值不一定会出问题,因为首次渲染中是没有diff算法参与的,只要后续不修改对应的数据,就不会出问题

	案例一:input案例
		此案例中,diff算法有生效,由于key值的问题,导致真实DOM复用错误

	案例二:商品排序案例
		此案例中,diff算法有生效,由于key值相同的节点,使用的数据不同,导致所有的真实DOM都复用失败
			在这个案例中,diff算法不仅没有优化性能,反而拖累的代码的执行速度

5.总结
	如果使用唯一标识作为key值,只要服务器返回的数据没有发生变化,那么之前的真实DOM就可以一直复用下去








