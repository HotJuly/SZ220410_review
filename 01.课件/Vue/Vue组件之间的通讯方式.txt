1.props
	适用场景:父子组件

	父向子传参:
		1.父组件将自己的数据通过标签属性,传递给子组件
		2.子组件在配置对象中书写props属性,用于声明接受哪些标签属性

		父传子的是数据

	子向父传参:
		1.父组件通过标签属性,将自己的方法传递给子组件
			传递给子组件的方法,必须在methods中声明,否则无法传递数据

		2.子组件在配置对象中书写props属性,用于声明接收父组件传递下来函数

		3.子组件调用父组件传递的函数,并向内部传入数据

		4.由于函数中的this指向父组件的实例对象,此时就可以直接操作父组件的数据进行更新

		父传子的是函数

2.provide/inject
	适用场景:祖孙组件

	流程:
		1.祖先组件在自己的配置对象中,添加provide属性,属性值是对象或者函数
		
		2.后代组件在自己的配置对象中,添加inject属性,属性值是数组,内部书写需要接收的属性名


	注意:
		1.从观察上来说是有响应式效果的,但是控制台会报错,需要使用特殊语法才会报错
		2.如果想要让后代组件给祖先组件传递数据,最好是把provide暴露出来的数据变为响应式的
			那么子组件修改接收到的数据,就会同步影响到祖先组件的数据

3.自定义事件
	v-model
		v-model被称为双向数据绑定(也就是伪双向数据流)
		使用语法:
			1.对input标签使用
				1.将data中的某个状态数据作为默认值,在input框中展示
    					<input type="text" :value="msg1">

				2.当用户修改input框中的内容时,会自动修改data中对应的属性值
    					<input type="text" :value="msg1" @input="(event)=>msg1=event.target.value">

			2.对组件标签使用
				1.父组件通过标签属性value,给子组件传递数据(默认属性名:value)
    					<HelloWorld :value="data1"/>

				2.子组件可以通过触发自定义事件input,修改父组件的数据(默认事件名:input)
    					<HelloWorld :value="data1" @input="(data)=>data1=data"/>

			扩展:
				1.子组件通过书写model配置选项,可以自定义v-model的属性名和事件名




